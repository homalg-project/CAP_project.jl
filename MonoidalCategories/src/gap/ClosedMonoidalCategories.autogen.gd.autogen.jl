# SPDX-License-Identifier: GPL-2.0-or-later
# MonoidalCategories: Monoidal and monoidal (co)closed categories
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Monoidal Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalLeftCoevaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt[ClosedMonoidalLeftCoevaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalLeftCoevaluationMorphismWithGivenRange`.
#! $F: ( a, b, r ) \mapsto \mathtt[ClosedMonoidalLeftCoevaluationMorphismWithGivenRange](a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalLeftEvaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt[ClosedMonoidalLeftEvaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalLeftEvaluationMorphismWithGivenSource`.
#! $F: ( a, b, s ) \mapsto \mathtt[ClosedMonoidalLeftEvaluationMorphismWithGivenSource](a, b, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalLeftEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalRightCoevaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt[ClosedMonoidalRightCoevaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalRightCoevaluationMorphismWithGivenRange`.
#! $F: ( a, b, r ) \mapsto \mathtt[ClosedMonoidalRightCoevaluationMorphismWithGivenRange](a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightCoevaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalRightEvaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt[ClosedMonoidalRightEvaluationMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ClosedMonoidalRightEvaluationMorphismWithGivenSource`.
#! $F: ( a, b, s ) \mapsto \mathtt[ClosedMonoidalRightEvaluationMorphismWithGivenSource](a, b, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddClosedMonoidalRightEvaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DualOnMorphisms`.
#! $F: ( alpha ) \mapsto \mathtt[DualOnMorphisms](alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDualOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddDualOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddDualOnMorphisms",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddDualOnMorphisms",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DualOnMorphismsWithGivenDuals`.
#! $F: ( s, alpha, r ) \mapsto \mathtt[DualOnMorphismsWithGivenDuals](s, alpha, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDualOnMorphismsWithGivenDuals",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddDualOnMorphismsWithGivenDuals",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddDualOnMorphismsWithGivenDuals",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddDualOnMorphismsWithGivenDuals",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `DualOnObjects`.
#! $F: ( a ) \mapsto \mathtt[DualOnObjects](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddDualOnObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddDualOnObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddDualOnObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddDualOnObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `EvaluationForDual`.
#! $F: ( a ) \mapsto \mathtt[EvaluationForDual](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddEvaluationForDual",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddEvaluationForDual",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddEvaluationForDual",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddEvaluationForDual",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `EvaluationForDualWithGivenTensorProduct`.
#! $F: ( s, a, r ) \mapsto \mathtt[EvaluationForDualWithGivenTensorProduct](s, a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddEvaluationForDualWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddEvaluationForDualWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddEvaluationForDualWithGivenTensorProduct",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddEvaluationForDualWithGivenTensorProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomOnMorphisms`.
#! $F: ( alpha, beta ) \mapsto \mathtt[InternalHomOnMorphisms](alpha, beta)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomOnMorphisms",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomOnMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomOnMorphisms",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomOnMorphisms",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomOnMorphismsWithGivenInternalHoms`.
#! $F: ( s, alpha, beta, r ) \mapsto \mathtt[InternalHomOnMorphismsWithGivenInternalHoms](s, alpha, beta, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomOnMorphismsWithGivenInternalHoms",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomOnMorphismsWithGivenInternalHoms",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomOnMorphismsWithGivenInternalHoms",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomOnMorphismsWithGivenInternalHoms",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomOnObjects`.
#! $F: ( a, b ) \mapsto \mathtt[InternalHomOnObjects](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomOnObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomOnObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomOnObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomOnObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductLeftAdjunctMorphism`.
#! $F: ( b, c, g ) \mapsto \mathtt[InternalHomToTensorProductLeftAdjunctMorphism](b, c, g)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct`.
#! $F: ( b, c, g, s ) \mapsto \mathtt[InternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct](b, c, g, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductLeftAdjunctionIsomorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[InternalHomToTensorProductLeftAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[InternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductRightAdjunctMorphism`.
#! $F: ( a, c, g ) \mapsto \mathtt[InternalHomToTensorProductRightAdjunctMorphism](a, c, g)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct`.
#! $F: ( a, c, g, s ) \mapsto \mathtt[InternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct](a, c, g, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctMorphismWithGivenTensorProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductRightAdjunctionIsomorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[InternalHomToTensorProductRightAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[InternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddInternalHomToTensorProductRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromDualObjectToInternalHomIntoTensorUnit`.
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromDualObjectToInternalHomIntoTensorUnit](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromDualObjectToInternalHomIntoTensorUnit",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromDualObjectToInternalHomIntoTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromDualObjectToInternalHomIntoTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromDualObjectToInternalHomIntoTensorUnit",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromInternalHomIntoTensorUnitToDualObject`.
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromInternalHomIntoTensorUnitToDualObject](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromInternalHomIntoTensorUnitToDualObject",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromInternalHomIntoTensorUnitToDualObject",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomIntoTensorUnitToDualObject",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomIntoTensorUnitToDualObject",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromInternalHomToObject`.
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromInternalHomToObject](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromInternalHomToObject",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObject",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObject",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObject",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromInternalHomToObjectWithGivenInternalHom`.
#! $F: ( a, s ) \mapsto \mathtt[IsomorphismFromInternalHomToObjectWithGivenInternalHom](a, s)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromInternalHomToObjectWithGivenInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObjectWithGivenInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObjectWithGivenInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromInternalHomToObjectWithGivenInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromObjectToInternalHom`.
#! $F: ( a ) \mapsto \mathtt[IsomorphismFromObjectToInternalHom](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromObjectToInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromObjectToInternalHomWithGivenInternalHom`.
#! $F: ( a, r ) \mapsto \mathtt[IsomorphismFromObjectToInternalHomWithGivenInternalHom](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsomorphismFromObjectToInternalHomWithGivenInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHomWithGivenInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHomWithGivenInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddIsomorphismFromObjectToInternalHomWithGivenInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LambdaElimination`.
#! $F: ( a, b, alpha ) \mapsto \mathtt[LambdaElimination](a, b, alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLambdaElimination",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddLambdaElimination",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddLambdaElimination",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddLambdaElimination",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LambdaIntroduction`.
#! $F: ( alpha ) \mapsto \mathtt[LambdaIntroduction](alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLambdaIntroduction",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddLambdaIntroduction",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddLambdaIntroduction",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddLambdaIntroduction",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MonoidalPostComposeMorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[MonoidalPostComposeMorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMonoidalPostComposeMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMonoidalPostComposeMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMonoidalPostComposeMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMonoidalPostComposeMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MonoidalPostComposeMorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[MonoidalPostComposeMorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMonoidalPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMonoidalPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMonoidalPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMonoidalPostComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MonoidalPreComposeMorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[MonoidalPreComposeMorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMonoidalPreComposeMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMonoidalPreComposeMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMonoidalPreComposeMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMonoidalPreComposeMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MonoidalPreComposeMorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[MonoidalPreComposeMorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMonoidalPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMonoidalPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMonoidalPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMonoidalPreComposeMorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromTensorProductToInternalHom`.
#! $F: ( a, b ) \mapsto \mathtt[MorphismFromTensorProductToInternalHom](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismFromTensorProductToInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromTensorProductToInternalHomWithGivenObjects`.
#! $F: ( s, a, b, r ) \mapsto \mathtt[MorphismFromTensorProductToInternalHomWithGivenObjects](s, a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismFromTensorProductToInternalHomWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHomWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHomWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMorphismFromTensorProductToInternalHomWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToBidual`.
#! $F: ( a ) \mapsto \mathtt[MorphismToBidual](a)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismToBidual",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMorphismToBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMorphismToBidual",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMorphismToBidual",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToBidualWithGivenBidual`.
#! $F: ( a, r ) \mapsto \mathtt[MorphismToBidualWithGivenBidual](a, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismToBidualWithGivenBidual",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddMorphismToBidualWithGivenBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddMorphismToBidualWithGivenBidual",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddMorphismToBidualWithGivenBidual",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductDualityCompatibilityMorphism`.
#! $F: ( a, b ) \mapsto \mathtt[TensorProductDualityCompatibilityMorphism](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductDualityCompatibilityMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductDualityCompatibilityMorphismWithGivenObjects`.
#! $F: ( s, a, b, r ) \mapsto \mathtt[TensorProductDualityCompatibilityMorphismWithGivenObjects](s, a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductDualityCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductInternalHomCompatibilityMorphism`.
#! $F: ( list ) \mapsto \mathtt[TensorProductInternalHomCompatibilityMorphism](list)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductInternalHomCompatibilityMorphismWithGivenObjects`.
#! $F: ( source, list, range ) \mapsto \mathtt[TensorProductInternalHomCompatibilityMorphismWithGivenObjects](source, list, range)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductInternalHomCompatibilityMorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomLeftAdjunctMorphism`.
#! $F: ( a, b, f ) \mapsto \mathtt[TensorProductToInternalHomLeftAdjunctMorphism](a, b, f)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom`.
#! $F: ( a, b, f, i ) \mapsto \mathtt[TensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom](a, b, f, i)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomLeftAdjunctionIsomorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[TensorProductToInternalHomLeftAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[TensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomLeftAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomRightAdjunctMorphism`.
#! $F: ( a, b, f ) \mapsto \mathtt[TensorProductToInternalHomRightAdjunctMorphism](a, b, f)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom`.
#! $F: ( a, b, f, i ) \mapsto \mathtt[TensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom](a, b, f, i)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctMorphismWithGivenInternalHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomRightAdjunctionIsomorphism`.
#! $F: ( a, b, c ) \mapsto \mathtt[TensorProductToInternalHomRightAdjunctionIsomorphism](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects`.
#! $F: ( s, a, b, c, r ) \mapsto \mathtt[TensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects](s, a, b, c, r)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddTensorProductToInternalHomRightAdjunctionIsomorphismWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalPropertyOfDual`.
#! $F: ( t, a, alpha ) \mapsto \mathtt[UniversalPropertyOfDual](t, a, alpha)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalPropertyOfDual",
                  [ IsCapCategory, IsFunction ] );

@DeclareOperation( "AddUniversalPropertyOfDual",
                  [ IsCapCategory, IsFunction, IsInt ] );

@DeclareOperation( "AddUniversalPropertyOfDual",
                  [ IsCapCategory, IsList, IsInt ] );

@DeclareOperation( "AddUniversalPropertyOfDual",
                  [ IsCapCategory, IsList ] );
